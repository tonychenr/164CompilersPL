README file for Programming Assignment 5  (Java edition)
=======================================================

Your directory should now contain the following files:

 ASTConstants.java    [DO NOT MODIFY]
 ASTLexer.java        [DO NOT MODIFY]
 ASTParser.java       [DO NOT MODIFY]
 AbstractSymbol.java  [DO NOT MODIFY]
 AbstractTable.java   [DO NOT MODIFY]
 BoolConst.java
 Cgen.java            [DO NOT MODIFY]
 CgenClassTable.java
 CgenNode.java
 CgenSupport.java
 ClassTable.java      [DO NOT MODIFY]
 Flags.java           [DO NOT MODIFY]
 IdSymbol.java        [DO NOT MODIFY]
 IdTable.java         [DO NOT MODIFY]
 IntSymbol.java
 IntTable.java        [DO NOT MODIFY]
 ListNode.java        [DO NOT MODIFY]
 build.xml            [DO NOT MODIFY]
 README
 StringSymbol.java
 StringTable.java     [DO NOT MODIFY]
 SymbolTable.java     [DO NOT MODIFY]
 SymtabExample.java   [DO NOT MODIFY]
 TokenConstants.java  [DO NOT MODIFY]
 TreeConstants.java
 TreeNode.java        [DO NOT MODIFY]
 Utilities.java       [DO NOT MODIFY]
 cool-tree.java
 example.cl
 tests
         1.cl
         2.cl
         3.cl
         4.cl
         5.cl
         6.cl
         checkpoint.cl
 compare-cgen.py      [DO NOT MODIFY]
 mycoolc.py           [DO NOT MODIFY]
 coolc.py             [DO NOT MODIFY]
 runmips.py           [DO NOT MODIFY]
 trap_handler.mars    [DO NOT MODIFY]
 coolc.jar            [DO NOT MODIFY]


        The build.xml contains targets for compiling and running your
        program, as well as handing it in. DO NOT MODIFY.

        The README contains this info. Part of the assignment is to
        fill the README with the write-up for your project. You should
        explain design decisions, explain why your code is correct,
        and why your test cases are adequate. It is part of the
        assignment to clearly and concisely explain things in text as
        well as to comment your code.

        In example.cl, you should write a correct Cool program which
        tests as many aspects of the code generator as possible. It
        should pass your code generator, and running MARS on the
        generated output should run the program correctly.

        CgenClassTable.java and CgenNode.java are the skeleton files for
        the code generator. These skeletons are much larger than the
        ones for previous assignments.  The skeletons provides three
        components of the code generator:

                - functions to build the inheritance graph; (we supply
                  this in case you didn't get this working for PA4)

                - functions to emit global data and constants;

        You should work to understand this code, and it will help you
        write the rest of the code generator.

        tests is a directory containing seven test cases.

        TreeNode.java and ListNode.java contain definitions used by
        the tree package. DO NOT MODIFY.

        cool-tree.java specifies and give an implementation of Cool
        ASTs (see the README for PA3 and the "Cool Tour").  In this
        assignment, you will need to complete the code generating
        methods for all Cool expression nodes.

        BoolConst.java, IntSymbol.java, and StringSymbol.java are used
        to manage constants in Cool programs.  You will need to
        complete the method for generating constant definitions in
        each of these classes.

        CgenSupport.java is general support code for the code
        generator.  You can add functions and constants as you see
        fit, but do not modify anything that's already there.  This
        class also serves as a placeholder for a bunch of constants as
        well as functions to emit MARS instructions (we supply these
        to save you some tedious coding).

        TreeConstants.java defined some useful symbol constants.  You
        may add some of your own, if you wish.

        ASTLexer.java, ASTParser.java, and ASTConstants.java implement
        a lexer and a parser for reading text representation of ASTs
        from console in the format produced by the parser phase. DO
        NOT MODIFY.

        Cgen.java supplies the driver for the compiler. You should not
        modify this code.  The script mycoolc can pass any of the
        standard flags to the code generator; for this assignment, -c
        (code generator debug) may be useful as it sets a global
        variable cgen_debug to true (1).  If you want your code
        generator to print debug information when the option is set,
        write your debug code in the following format:

              if (cgen_debug)
              {
                ...
              }

        SymbolTable.java contains a symbol table implementation. Read
        the comments in the file and look at the example in
        SymtabExample.java.  You are not required to use this code,
        but you may find it useful. DO NOT MODIFY.

Instructions
------------

        To compile your compiler and code generator type:

        % ant cgen

        To test your compiler, type:

        % python mycoolc.py [-o output filename] <file1.cl> <file2.cl> ...

        This command parses all the cool files given on the command
        line, passes them through the semantic checker, and then hands
        the program AST to your code generator.

        To run your compiler on the file example.cl, type:

        % ant test

        To run your compiler on test files in tests directory, type:

	% ant test-all

        To run the produced code:

        % python runmips.py file1.s  /* or the output filename you chose */

        To turn in your work at checkpoint, type:

        % ant submit-clean
        % submit PA5-checkpoint

        To turn in your work finally, type:

        % ant submit-clean
        % submit PA5

        Be sure to submit all relevant source files.
        In particular, you probably want to turn in cool-tree.java,
        TreeConstants.java, BoolConst.java, IntSymbol.java, StringSymbol.java,
        CgenNode.java, CgenClassTable.java, CgenSupport.java, example.cl, README.

        You may turn in the assignment as many times as you like.
        However, only the last version will be retained for grading.

        GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA5
----------------

Expression code generation is done in cool-tree.java in the code() methods.
Object tables, object name table, prototype object table, dispatch table are done in CgenClassTable.
Object initialization and method initializations, which call expression code generation functions,
are also done in CgenClassTable.

For assign, it either generates code for an object attribute assignment or an assignment
to a formal in the stack. The frameOffset variable in CgenClassTable handles pushing new
variables to the stack by providing the current offset from the frame pointer, so it can 
be accessed later. The scope holds <formal name, frameOffset> pairs. Scope is updated
in appropriate areas, such as let and case. Attribute offsets can be obtained from the 
position in the Vector of attr's in the CgenNode.

Function calls (dispatch) save the formal arguments. The function definition handles
saving the $s0, $fp, and $ra. Formal arguments and the 3 saved registers
are popped off the stack at the end of the function definition. The difference from lecture
is the function definition handling pushing $fp to the stack instead of doing this in function call.
We centralized saving registers into the method definition as it was easier to keep track them.

The stack for dispatch of a function f(x1, x2) is x1|x2|old fp|s0|ra|...|. $fp points to the saved ra as in lecture.

For case expressions, we generate a beq statement for each parent of the type of expr for each branch, because
we want the closest ancestor among branches. This covers all parent types of the expr. There is a new scope
as specified in the manual for the branch taken.

We handle runtime errors in the respective expression subclass' code() method.

The code generation for the rest of the expressions follow what is stated in the operational semantics
of the manual.

For tests, we try to test the behavior of every expression. We test the initialization of object attributes.
We test runtime errors as stated in the spec. We also test the order of arguments in a dispatch to make
sure we are pushing arguments correctly.





